"""
vulnerability_scanner.py

This module is responsible for scanning network devices for vulnerabilities. 
It integrates various techniques to identify potential security weaknesses.

Author: Jacob Thomas, Mr. Redmond
Version: 0.1.0
"""

import json
import os
import subprocess

class VulnerabilityScanner:
    def __init__(self, config_file):
        """
        Initialize the VulnerabilityScanner with a configuration file.
        
        :param config_file: Path to the JSON file containing scanner configurations.
        """
        self.config_file = config_file
        self.config = self.load_config()
        self.scan_results = []

    def load_config(self):
        """
        Load scanner configurations from the provided JSON file.
        
        :return: Scanner configurations.
        """
        try:
            with open(self.config_file, 'r') as file:
                config = json.load(file)
                return config
        except Exception as e:
            print(f"Error occurred while loading configurations: {e}")
            return {}

    def perform_scan(self):
        """
        Perform vulnerability scanning based on the loaded configurations.
        """
        try:
            ip_range = self.config.get("ip_range", "192.168.1.0/24")
            command = f"nmap -sV --script=vuln {ip_range}"
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            self.scan_results.append({"command": command, "result": result.stdout})
            print("Vulnerability scanning completed successfully.")
        except Exception as e:
            print(f"Error occurred while performing scan: {e}")

    def save_scan_results(self, file_path):
        """
        Save the scan results to a JSON file.
        
        :param file_path: Path to the file where the scan results will be saved.
        """
        try:
            with open(file_path, 'w') as file:
                json.dump(self.scan_results, file, indent=4)
            print(f"Scan results successfully saved to {file_path}")
        except Exception as e:
            print(f"Error occurred while saving scan results: {e}")

    def load_scan_results(self, file_path):
        """
        Load scan results from a JSON file.
        
        :param file_path: Path to the file from which the scan results will be loaded.
        """
        try:
            with open(file_path, 'r') as file:
                self.scan_results = json.load(file)
            print(f"Scan results successfully loaded from {file_path}")
        except Exception as e:
            print(f"Error occurred while loading scan results: {e}")

    def print_summary(self):
        """
        Print a summary of the scan results.
        """
        print("Vulnerability Scan Summary:")
        for i, result in enumerate(self.scan_results):
            print(f"Scan {i + 1}: Command '{result['command']}' - Result: {result['result']}")

if __name__ == "__main__":
    config_file_path = 'scanner_config.json'
    results_file_path = 'scan_results.json'

    # Ensure scanner_config.json exists
    if not os.path.exists(config_file_path):
        print(f"{config_file_path} not found. Creating default configurations file.")
        default_config = {
            "ip_range": "192.168.1.0/24"
        }
        with open(config_file_path, 'w') as file:
            json.dump(default_config, file, indent=4)

    scanner = VulnerabilityScanner(config_file_path)
    scanner.perform_scan()
    scanner.save_scan_results(results_file_path)
    scanner.print_summary()
